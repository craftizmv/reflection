When would you want to use a remote repository rather than keeping all your work
local?

    Fill in your answer here

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Fill in your answer here

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Fill in your answer here

What is the benefit of having a copy of the last known state of the remote
stored locally?

    Fill in your answer here

How would you collaborate without using Git or GitHub? What would be easier,
and what would be harder?
WO Git or Github -: In this case, we need to manually collaborate and tell the other guy to be in sync before pushing changes and merging..
With Git -: It becomes very easy to collaborate.


When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    Fill in your answer here


Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
this make sense in time when we are in between something and we only want to look at the remote changes after a certain amount of time.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
forks -: To fork (Kind of Clone) someone else repository on Github as we dont have the permission to change anything in there repository.
clone (Repository can be cloned locally from a repos present locally, or it can be cloned from the repos from the github).
branches -: when we want to implement some new feature or experimental change then we create a branch from the existing branch.

What is the benefit of having a copy of the last known state of the remote stored locally?
It helps us to see by how much our corresponding local branch is ahead with remote.
And later if something is added by other collaborater then that also we can keep track of.


When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
This we ll require when we are working ion some feature which is experimental or tricky and may break master or may be the quality is
not amazing ... in that case this approach is usefull. Also if there are other collaboraters as well
Working with approach is usefull when there is no reviewing happening and less collaboraters 1 or 2 .. and development is just for small feature.


My Extras -:

Lession 3 learnings -:

1. Github contains many opensource project in which we can contribute .. these can be small as well as big ..
=============
git remote -> to see the list of remote branches
	
git remote add origin URL_OF_THE_CREATED_REPOS

git remote -v (Verbose - display the url to push the data from and the url to push the data to ..)

=============


=============
Basically when we do "git pull origin master" it is equivalent to the git fetch (which update any remote branch changes locally)
and 
git merge master origin/master
=============

=============
git branch -a (Displays the list of branches together with the remote branches..)
=============

=============
git fetch origin (This will update all the local branches.. )

git log origin/master and git diff origin/master will display the new changes..
=============

=============
Fast forward Merges -:
=============


=============
git pull -> It will fetch the latest changes from the remote branch.
=============
	